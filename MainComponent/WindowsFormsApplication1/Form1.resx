<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="mainComponent1.BackgroundImagePrimary" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        YII=
</value>
  </data>
</root>