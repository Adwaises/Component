<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="mainComponent1.BackgroundImagePrimary" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>